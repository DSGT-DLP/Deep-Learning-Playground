openapi: "3.0.0"
info:
  title: DLP API
  description: API endpoints for the Deep Learning Playground Project
  version: "1.0.0"
paths:
  /test:
    get:
      summary: A simple endpoint to test if our backend is alive
      responses:
        "200":
          description: Test Backend alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  Status:
                    type: string
                    example: "Backend is alive"
  /api/sendEmail:
    post:
      summary: An endpoint to send email notification after a user finishes training their model
      description: Endpoint to send email notification to user after training completes via AWS SES
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email_address
                - subject
                - body_text
              properties:
                email_address:
                  type: string
                  description: The email address of the recipient
                subject:
                  type: string
                  description: The subject of the email
                body_text:
                  type: string
                  description: The body text of the email
              example:
                email_address: example@example.com
                subject: "Training completed"
                body_text: "Your model training has been completed successfully."
        required: true
      responses:
        "200":
          description: Train Success Email Notification Completed Correctly
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message Sent to example@example.com"
        "400":
          description: Train Success Email Notification Not working. Cause of error depends on your use case
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/sendUserCodeEval:
    post:
      description: Given user inputted code in the preprocessing mode, execute it!
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - codeSnippet
              properties:
                data:
                  type: object
                  description: The email address of the recipient
                codeSnippet:
                  type: string
                  description: The subject of the email
              example:
                data: { "col1": [val1, val2], "col2": [val3, val4] }
                codeSnippet: 'def preprocess(df):print("Hello World")'
        required: true
      responses:
        "200":
          description: Preprocessed data successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Preprocessed data"
                  data:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
                  columns:
                    type: array
                    example: ["newcol1"]
        "400":
          description: Preprocess didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/getUserProgressData:
    post:
      description: Endpoint to retrieve progress data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
              properties:
                user_id:
                  type: object
                  description: user id
              example:
                user_id: { "col1": [val1, val2], "col2": [val3, val4] }
        required: true
      responses:
        "200":
          description: Progress data retrieved successfully
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Progress data wasn't retrieved successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/getSignedUploadUrl:
    post:
      description: Endpoint to upload files to S3
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - version
                - filename
                - file
              properties:
                version:
                  type: integer
                  description: The file version
                filename:
                  type: string
                  description: The name of the file
                file:
                  type: object
                  description: the file
              example:
                version: 2
                filename: "file"
                file: { "col1": [val1, val2], "col2": [val3, val4] }
        required: true
      responses:
        "200":
          description: Data uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upload successful"
        "400":
          description: Upload didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/img-run:
    post:
      description: Endpoint to train image models
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - train_transform
                - test_transform
                - user_arch
                - using_default_dataset
                - custom_model_name
                - execution_id
                - optimizer_name
                - criterion
                - epochs
                - shuffle
                - batch_size
                - uid
              properties:
                train_transform:
                  type: array
                  description: transformations on images of the train dataset
                test_transform:
                  type: array
                  description: transformations on images of the test dataset
                user_arch:
                  type: array
                  description: Architecture of the model
                uid:
                  type: string
                  description: user id
                custom_model_name:
                  type: string
                  description: name of the model
                execution_id:
                  type: string
                  description: id of the process in the execution table
                optimizer_name:
                  type: string
                  description: optimizer selected (SGD, ADAM)
                criterion:
                  type: string
                  description: criterion selected (BCELOSS, CELOSS)
                using_default_dataset:
                  type: string
                  description: default dataset selected
                epochs:
                  type: integer
                  description: number of epochs
                shuffle:
                  type: boolean
                  description: determines whether to shuffle the datasets
                batch_size:
                  type: integer
                  description: size of the batch
              example:
                train_transforms: [val1, val2, val3]
                test_transforms: [val1, val2, val3]
                user_arch: [val1, val2, val3]
                uid: "user"
                custom_model_name: "model"
                execution_id: "abcde"
                target: "target"
                optimizer_name: "SGD"
                criterion: "CELOSS"
                using_default_dataset: "IRIS"
                epochs: 10
                shuffle: True
                batch_size: 10
        required: true
      responses:
        "200":
          description: Trained model successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dataset trained and results outputted successfully"
                  dl_results:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
                  auxiliary_outputs:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
        "400":
          description: Training didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/ml-run:
    post:
      description: Endpoint to train classical ml models
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_arch
                - csv_data
                - target
                - features
                - using_default_dataset
                - shuffle
                - problem_type
              properties:
                user_arch:
                  type: array
                  description: Architecture of the model
                csv_data:
                  type: object
                  description: csv input data
                target:
                  type: string
                  description: selected target column
                features:
                  type: array
                  description: selected features
                using_default_dataset:
                  type: string
                  description: default dataset selected
                shuffle:
                  type: boolean
                  description: determines whether to shuffle the datasets
                problem_type:
                  type: string
                  description: problem type selected (classification, regression)
              example:
                user_arch: [val1, val2, val3]
                csv_data: { "col1": [val1, val2], "col2": [val3, val4] }
                target: "target"
                features: [val1, val2, val3]
                using_default_dataset: "IRIS"
                shuffle: True
                prbolem_type: "regression"
        required: true
      responses:
        "200":
          description: Trained model successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dataset trained and results outputted successfully"
                  dl_results:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
                  auxiliary_outputs:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
        "400":
          description: Training didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/object-detection:
    post:
      description: Endpoint to detect objects on user uploaded images
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - problem_type
                - detection_type
                - transforms
              properties:
                problem_type:
                  type: string
                  description: problem type selected (Labels, Celebrities)
                detection_type:
                  type: string
                  description: detection type selected (Rekognition, Huggingface)
                transforms:
                  type: array
                  description: transforms to be applied to the image
              example:
                problem_type: "Labels"
                detection_type: "Rekognition"
                transforms: [val1, val2, val3]
        required: true
      responses:
        "200":
          description: Objects detected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Detection worked successfully"
                  dl_results:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
                  auxiliary_outputs:
                    type: array
                    example: [val1, val2, val3]
        "400":
          description: Detection didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/tabular-run:
    post:
      description: Endpoint to train models on tabular data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_arch
                - fileURL
                - uid
                - csv_data
                - custom_model_name
                - execution_id
                - target
                - features
                - problem_type
                - optimizer_name
                - criterion
                - using_default_dataset
                - epochs
                - shuffle
                - test_size
                - batch_size
              properties:
                user_arch:
                  type: array
                  description: Architecture of the model
                fileURL:
                  type: string
                  description: URL of the uploaded dataset
                uid:
                  type: string
                  description: user id
                csv_data:
                  type: object
                  description: csv input data
                custom_model_name:
                  type: string
                  description: name of the model
                execution_id:
                  type: string
                  description: id of the process in the execution table
                target:
                  type: string
                  description: selected target column
                features:
                  type: array
                  description: selected features
                problem_type:
                  type: string
                  description: problem type selected (classification, regression)
                optimizer_name:
                  type: string
                  description: optimizer selected (SGD, ADAM)
                criterion:
                  type: string
                  description: criterion selected (BCELOSS, CELOSS)
                using_default_dataset:
                  type: string
                  description: default dataset selected
                epochs:
                  type: integer
                  description: number of epochs
                shuffle:
                  type: boolean
                  description: determines whether to shuffle the datasets
                test_size:
                  type: number
                  description: size of the test dataset
                batch_size:
                  type: integer
                  description: size of the batch
              example:
                user_arch: [val1, val2, val3]
                fileURL: "file"
                uid: "user"
                csv_data: { "col1": [val1, val2], "col2": [val3, val4] }
                custom_model_name: "model"
                execution_id: "abcde"
                target: "target"
                features: [val1, val2, val3]
                problem_type: "regression"
                optimizer_name: "SGD"
                criterion: "CELOSS"
                using_default_dataset: "IRIS"
                epochs: 10
                shuffle: True
                test_size: 0.2
                batch_size: 10
        required: true
      responses:
        "200":
          description: Trained model successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Dataset trained and results outputted successfully"
                  dl_results:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
                  auxiliary_outputs:
                    type: object
                    example: { "col1": [val1, val2], "col2": [val3, val4] }
        "400":
          description: Training didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/upload:
    post:
      description: Endpoint to upload files locally
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: object
                  description: the file
              example:
                file: { "col1": [val1, val2], "col2": [val3, val4] }
        required: true
      responses:
        "200":
          description: Data uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Upload success"
        "400":
          description: Upload didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/writeToQueue:
    post:
      description: Endpoint to add training requests to SQS queue
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - queue_data
              properties:
                queue_data:
                  type: object
                  description: data to be added to queue
              example:
                queue_data: { "col1": [val1, val2], "col2": [val3, val4] }
        required: true
      responses:
        "200":
          description: Wrote to queue successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully added your training request to the queue"
        "400":
          description: Write to queue didn't go through successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/defaultDataset:
    post:
      description: Endpoint to get user selected default dataset for training
      requestBody:
        content:
          application/json:
            schema:
              type: string
              required:
                - using_default_dataset
              properties:
                using_default_dataset:
                  type: string
                  description: dataset selected for training
              example:
                using_default_dataset: "IRIS"
        required: true
      responses:
        "200":
          description: Dataset selected successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  columns:
                    type: array
                    example: [col1, col2, col3]
        "400":
          description: Dataset wasn't selected properly. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
  /api/updateUserProgressData:
    post:
      description: Endpoint to update user progress on learning module questions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - moduleID
                - sectionID
                - questionID
              properties:
                user_id:
                  type: object
                  description: user id
                moduleID:
                  type: integer
                  description: id of the learning module
                sectionID:
                  type: integer
                  description: id of the secion in the learning module
                questionID:
                  type: integer
                  description: id of the question in the section
              example:
                user_id: { "col1": [val1, val2], "col2": [val3, val4] }
                moduleID: 1
                sectionID: 1
                questionID: 1
        required: true
      responses:
        "200":
          description: Progress data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
        "400":
          description: Progress data wasn't updated successfully. This is usually something wrong with your code
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User is not authenticated"
